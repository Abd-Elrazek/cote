{"version":3,"sources":["../src/index.js"],"names":["Discovery","require","Requester","Responder","Publisher","Subscriber","Sockend","Monitor","MonitoringTool","TimeBalancedRequester","PendingBalancedRequester","parser","_","cote","options","defaults","environment","useHostNames","broadcast","multicast","environmentSettings","process","env","COTE_ENV","COTE_USE_HOST_NAMES","COTE_BROADCAST_ADDRESS","DOCKERCLOUD_IP_ADDRESS","undefined","COTE_MULTICAST_ADDRESS","checkInterval","int","COTE_CHECK_INTERVAL","helloInterval","COTE_HELLO_INTERVAL","helloLogsEnabled","bool","COTE_HELLO_LOGS_ENABLED","statusLogsEnabled","COTE_STATUS_LOGS_ENABLED","log","COTE_LOG","nodeTimeout","COTE_NODE_TIMEOUT","keys","Object","filter","k","slice","forEach","keyName","keyArray","split","map","toLowerCase","pluginName","shift","pluginObj","toUpperCase","setDefaults","components","component","setEnvironment","setUseHostNames","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const Discovery = require('./components/discovery');\nconst Requester = require('./components/requester');\nconst Responder = require('./components/responder');\nconst Publisher = require('./components/publisher');\nconst Subscriber = require('./components/subscriber');\nconst Sockend = require('./components/sockend');\nconst Monitor = require('./components/monitor');\nconst MonitoringTool = require('./monitoring-tool');\nconst TimeBalancedRequester = require('./components/time-balanced-requester');\nconst PendingBalancedRequester = require('./components/pending-balanced-requester');\n\nconst parser = require('../lib/env-var-parser');\n\nconst _ = require('lodash');\n\nconst cote = (options) => {\n    options = options || {};\n\n    const defaults = {\n        environment: '',\n        useHostNames: false,\n        broadcast: null,\n        multicast: null,\n    };\n\n    const environmentSettings = {\n        environment: process.env.COTE_ENV,\n        useHostNames: !!process.env.COTE_USE_HOST_NAMES,\n        broadcast: process.env.COTE_BROADCAST_ADDRESS ||\n        (process.env.DOCKERCLOUD_IP_ADDRESS ? '10.7.255.255' : undefined),\n        multicast: process.env.COTE_MULTICAST_ADDRESS,\n        checkInterval: parser.int(process.env.COTE_CHECK_INTERVAL),\n        helloInterval: parser.int(process.env.COTE_HELLO_INTERVAL),\n        helloLogsEnabled: parser.bool(process.env.COTE_HELLO_LOGS_ENABLED),\n        statusLogsEnabled: parser.bool(process.env.COTE_STATUS_LOGS_ENABLED),\n        log: parser.bool(process.env.COTE_LOG),\n        nodeTimeout: parser.int(process.env.COTE_NODE_TIMEOUT),\n    };\n\n    const keys = Object.keys(process.env).filter((k) => k.slice(0, 15) == 'COTE_DISCOVERY_');\n\n    keys.forEach((k) => {\n        const keyName = k.slice(15);\n        const keyArray = keyName.split('_').map((k) => k.toLowerCase());\n        const pluginName = keyArray.shift();\n\n        const pluginObj = environmentSettings[pluginName] = environmentSettings[pluginName] || {};\n\n        keyArray.forEach((k) => {\n            pluginObj[k] = process.env[`COTE_DISCOVERY_${pluginName.toUpperCase()}_${k.toUpperCase()}`];\n        });\n\n        // Discovery plugins (such as redis) may not have access to real IP addresses.\n        // Therefore we automatically default to `true` for `COTE_USE_HOST_NAMES`,\n        // since host names are accurate.\n        environmentSettings.useHostNames = true;\n    });\n\n    _.defaults(options, environmentSettings, defaults);\n\n    Discovery.setDefaults(options);\n\n    const components = [\n        Requester,\n        Responder,\n        Publisher,\n        Subscriber,\n        Sockend,\n        TimeBalancedRequester,\n        PendingBalancedRequester,\n    ];\n\n    components.forEach(function(component) {\n        component.setEnvironment(options.environment);\n        component.setUseHostNames &&\n            component.setUseHostNames(options.useHostNames);\n    });\n\n    return cote;\n};\n\ncote.Requester = Requester;\ncote.Responder = Responder;\ncote.Publisher = Publisher;\ncote.Subscriber = Subscriber;\ncote.Sockend = Sockend;\ncote.Monitor = Monitor;\ncote.MonitoringTool = MonitoringTool;\ncote.TimeBalancedRequester = TimeBalancedRequester;\ncote.PendingBalancedRequester = PendingBalancedRequester;\n\nmodule.exports = cote();\n"]}