{"version":3,"sources":["../src/options-builder.js"],"names":["parser","bool","v","undefined","toLowerCase","int","parseInt","str","exists","defaultOptions","environment","useHostNames","broadcast","multicast","envVarOptionsMap","COTE_ENV","COTE_USE_HOST_NAMES","COTE_MULTICAST_ADDRESS","COTE_CHECK_INTERVAL","COTE_HELLO_INTERVAL","COTE_HELLO_LOGS_ENABLED","COTE_STATUS_LOGS_ENABLED","COTE_LOG","COTE_NODE_TIMEOUT","module","exports","options","environmentSettings","Object","entries","forEach","envVar","setting","process","env","value","COTE_BROADCAST_ADDRESS","DOCKERCLOUD_IP_ADDRESS","keys","filter","k","slice","keyName","keyArray","split","map","pluginName","shift","pluginObj","toUpperCase"],"mappings":"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","sourcesContent":["const parser = {\n  bool: (v) => v != undefined ? v.toLowerCase() == 'true' : undefined,\n  int: (v) => v != undefined ? parseInt(v, 10) : undefined,\n  str: (v) => v,\n  exists: (v) => !!v,\n};\n\nconst defaultOptions = {\n  environment: '',\n  useHostNames: false,\n  broadcast: null,\n  multicast: null,\n};\n\nconst envVarOptionsMap = {\n  COTE_ENV: ['environment', parser.str],\n  COTE_USE_HOST_NAMES: ['useHostNames', parser.exists],\n  COTE_MULTICAST_ADDRESS: ['multicast', parser.str],\n  COTE_CHECK_INTERVAL: ['checkInterval', parser.int],\n  COTE_HELLO_INTERVAL: ['helloInterval', parser.int],\n  COTE_HELLO_LOGS_ENABLED: ['helloLogsEnabled', parser.bool],\n  COTE_STATUS_LOGS_ENABLED: ['statusLogsEnabled', parser.bool],\n  COTE_LOG: ['log', parser.bool],\n  COTE_NODE_TIMEOUT: ['nodeTimeout', parser.int],\n};\n\nmodule.exports = (options = {}) => {\n  const environmentSettings = {};\n\n  Object.entries(envVarOptionsMap).forEach(([envVar, [setting, parser]]) => {\n    if (!(envVar in process.env)) return;\n\n    const value = process.env[envVar];\n\n    environmentSettings[setting] = parser(value);\n  });\n\n  if (!process.env.COTE_BROADCAST_ADDRESS && process.env.DOCKERCLOUD_IP_ADDRESS) {\n    environmentSettings.broadcast = '10.7.255.255';\n  }\n\n  const keys = Object.keys(process.env).filter((k) => k.slice(0, 15) == 'COTE_DISCOVERY_');\n\n  keys.forEach((k) => {\n    const keyName = k.slice(15);\n    const keyArray = keyName.split('_').map((k) => k.toLowerCase());\n    const pluginName = keyArray.shift();\n\n    const pluginObj = environmentSettings[pluginName] = environmentSettings[pluginName] || {};\n\n    keyArray.forEach((k) => {\n      pluginObj[k] = process.env[`COTE_DISCOVERY_${pluginName.toUpperCase()}_${k.toUpperCase()}`];\n    });\n\n    // Discovery plugins (such as redis) may not have access to real IP addresses.\n    // Therefore we automatically default to `true` for `COTE_USE_HOST_NAMES`,\n    // since host names are accurate.\n    environmentSettings.useHostNames = true;\n  });\n\n  return { ...defaultOptions, ...environmentSettings, ...options };\n};\n"],"file":"options-builder.js"}