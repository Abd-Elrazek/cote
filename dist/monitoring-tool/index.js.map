{"version":3,"sources":["../../src/monitoring-tool/index.js"],"names":["module","exports","port","fs","require","_","cote","portfinder","server","createServer","handler","io","listen","monitor","Monitor","name","disableScreen","sockend","Sockend","namespace","key","publisher","Publisher","broadcasts","graph","nodes","links","rawLinks","onPort","err","on","code","getPort","status","node","discovery","id","processId","me","source","target","sock","removedNode","nodeId","rawLink","removedNodeIndex","indexOf","splice","length","setInterval","hosts","getHosts","concat","processes","getProcesses","getNodes","indexMap","forEach","index","getLinks","publish","req","res","readFile","__dirname","data","writeHead","end","groupBy","map","process","type","processCommand","filter","nodesByHosts","nodesByHost","hostId","nodesByProcess","processNodes","Object","keys","host","advertisement","simplifiedNodes","flatten","link"],"mappings":"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","sourcesContent":["module.exports = function(port) {\n    const fs = require('fs');\n    const _ = require('lodash');\n    const cote = require('../');\n    const portfinder = require('portfinder');\n\n    const server = require('http').createServer(handler);\n    const io = require('socket.io').listen(server);\n\n    // Instantiate a monitor, sockend and publisher components\n    const monitor = new cote.Monitor({\n        name: 'monitor',\n    }, { disableScreen: true });\n\n    const sockend = new cote.Sockend(io, {\n        name: 'sockend',\n        namespace: 'monitoring',\n        key: 'monitoring',\n    });\n\n    const publisher = new cote.Publisher({\n        name: 'status publisher',\n        broadcasts: ['statusUpdate'],\n        namespace: 'monitoring',\n        key: 'monitoring',\n    });\n\n    // Graph related variables\n    const graph = {\n        nodes: [],\n        links: [],\n    };\n    const rawLinks = {};\n\n    const onPort = (err, port) => {\n        server.listen(port);\n        server.on('error', (err) => {\n            if (err.code != 'EADDRINUSE') throw err;\n\n            portfinder.getPort({ port }, onPort);\n        });\n    };\n\n    portfinder.getPort({ port: port || 5555 }, onPort);\n\n    monitor.on('status', function(status) {\n        const node = monitor.discovery.nodes[status.id];\n        if (!node) return;\n\n        if (node.processId == monitor.discovery.me.processId) return;\n\n        rawLinks[status.id] = {\n            source: status.id,\n            target: status.nodes,\n        };\n    });\n\n    monitor.sock.sock.on('bind', () => {\n        monitor.discovery.on('removed', function(node) {\n            delete rawLinks[node.id];\n            const removedNode = node.id;\n\n            for (let nodeId in rawLinks) {\n                const rawLink = rawLinks[nodeId];\n\n                const removedNodeIndex = rawLink.target.indexOf(removedNode);\n                if (removedNodeIndex > -1) {\n                    rawLink.target.splice(removedNodeIndex, 1);\n                    if (!rawLink.target.length) delete rawLinks[nodeId];\n                }\n            }\n        });\n    });\n\n    setInterval(function() {\n        graph.nodes = [];\n\n        const hosts = getHosts(monitor.discovery.nodes);\n        graph.nodes = graph.nodes.concat(hosts);\n\n        const processes = getProcesses(monitor.discovery.nodes);\n        graph.nodes = graph.nodes.concat(processes);\n\n        const nodes = getNodes(monitor.discovery.nodes);\n        graph.nodes = graph.nodes.concat(nodes);\n\n        // Update links\n        const indexMap = {};\n        graph.nodes.forEach(function(node, index) {\n            indexMap[node.id] = index;\n        });\n        graph.links = getLinks(rawLinks, indexMap);\n\n        // Publish the output\n        publisher.publish('statusUpdate', graph);\n    }, 5000);\n\n    function handler(req, res) {\n        fs.readFile(__dirname + '/frontend/index.html', function(err, data) {\n            if (err) {\n                res.writeHead(500);\n                return res.end('Error loading index.html');\n            }\n            res.writeHead(200);\n            res.end(data);\n        });\n    }\n\n    function getProcesses(nodes) {\n        const processes = _.groupBy(nodes, 'processId');\n\n        return _.map(processes, (process, processId) => (\n            {\n                id: processId,\n                type: 'process',\n                name: process[0].processCommand,\n            }\n        )).filter(function(process) {\n            return process.id != monitor.discovery.me.processId;\n        });\n    }\n\n    function getHosts(nodes) {\n        const nodesByHosts = _.groupBy(nodes, 'hostName');\n\n        _.forEach(nodesByHosts, (nodesByHost, hostId) => {\n            const nodesByProcess = _.groupBy(nodesByHost, 'processId');\n\n            _.forEach(nodesByProcess, (processNodes, processId) => {\n                if (processId == monitor.discovery.me.processId) return;\n\n                rawLinks[processId] = {\n                    source: processId,\n                    target: processNodes.map(function(node) {\n                        return node.id;\n                    }),\n                };\n            });\n\n            rawLinks[hostId] = {\n                source: hostId,\n                target: Object.keys(nodesByProcess),\n            };\n        });\n\n        let hosts = Object.keys(nodesByHosts);\n        hosts = _.map(hosts, (host) => ({\n            id: host,\n            type: 'host',\n            name: host,\n        }));\n        return hosts;\n    }\n\n    function getNodes(nodes) {\n        nodes = _.filter(nodes, (node) =>\n            node.processId != monitor.discovery.me.processId &&\n            node.advertisement.name != 'sockendSub' &&\n            node.advertisement.name != 'sockendReq'\n        );\n\n        const simplifiedNodes = _.map(nodes, (node) => ({\n            id: node.id,\n            type: 'node',\n            name: node.advertisement.name,\n        }));\n\n        return simplifiedNodes;\n    }\n\n    function getLinks(rawLinks, indexMap) {\n        const links = _.map(rawLinks,\n            (rawLink) => rawLink.target.map(\n                (target) => ({ // flip source & target for semantics :)\n                    source: indexMap[target], // monitor.discovery.nodes[target].advertisement.name + '#' + target,\n                    target: indexMap[rawLink.source], // monitor.discovery.nodes[rawLink.source].advertisement.name +\n                    // '#' + rawLink.source\n                })\n            )\n        );\n\n        return _.flatten(links).filter((link) => link.source && link.target);\n    }\n\n    return { monitor, server };\n};\n"],"file":"index.js"}